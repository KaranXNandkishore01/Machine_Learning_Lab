{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP/KFb/bAqx8Vibp0au9nwr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#PyTorch Programs"],"metadata":{"id":"m7FWZ_mwk2QC"}},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":547},"collapsed":true,"id":"MuTkITmpMj6J","executionInfo":{"status":"error","timestamp":1748616623876,"user_tz":-330,"elapsed":145,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"40d901be-c100-41f5-bbf9-f4e79501da4c"},"outputs":[{"output_type":"error","ename":"ImportError","evalue":"cannot import name 'nn' from partially initialized module 'torch' (most likely due to a circular import) (/usr/local/lib/python3.11/dist-packages/torch/__init__.py)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-dad3ccbf03d0>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3.0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m4.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6.0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m   2106\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2107\u001b[0m \u001b[0;31m# needs to be after the above ATen bindings so we can overwrite from Python side\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2108\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtorch\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0m_VF\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0m_VF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunctional\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfunctional\u001b[0m  \u001b[0;31m# usort: skip\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2109\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunctional\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0;34m*\u001b[0m  \u001b[0;31m# usort: skip # noqa: F403\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2110\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/functional.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunctional\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtorch\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0m_VF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_C\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0m_add_docstr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mImportError\u001b[0m: cannot import name 'nn' from partially initialized module 'torch' (most likely due to a circular import) (/usr/local/lib/python3.11/dist-packages/torch/__init__.py)","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}],"source":["import torch\n","import numpy as np\n","a = torch.tensor([1.0, 2.0, 3.0])\n","b = torch.tensor([4.0, 5.0, 6.0])\n","c= a+b\n","print(c)\n","print(torch.dot(a,b))\n","print(a*b)"]},{"cell_type":"code","source":["x=torch.arange(12)\n","print(x)\n","x=x.view(3,4)\n","print(\"reshaped\", x.view(3,4))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tVmem0vwSE4G","executionInfo":{"status":"ok","timestamp":1747385543084,"user_tz":-330,"elapsed":13,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"95f82ba6-2ea7-46f7-d37e-a1caea47ed45"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\n","reshaped tensor([[ 0,  1,  2,  3],\n","        [ 4,  5,  6,  7],\n","        [ 8,  9, 10, 11]])\n"]}]},{"cell_type":"code","source":["x"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U6W4GBKBQrNY","executionInfo":{"status":"ok","timestamp":1747385545625,"user_tz":-330,"elapsed":16,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"a52ea190-b80e-4b99-8dcd-9f3ee4319d63"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[ 0,  1,  2,  3],\n","        [ 4,  5,  6,  7],\n","        [ 8,  9, 10, 11]])"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["#Differentiation in the workbook.\n","x=torch.tensor(2.0, requires_grad=True)\n","\n","y=x**3+2*x+1\n","y.backward()\n","print(\"Gradient 2\", x.grad)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"frb4KQD7TRc4","executionInfo":{"status":"ok","timestamp":1747386008036,"user_tz":-330,"elapsed":17,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"c433a0ad-d743-47bd-bbf4-ff6e3600f844"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Gradient 2 tensor(14.)\n"]}]},{"cell_type":"code","source":["import torch  # You forgot to import torch\n","\n","# Define the shape of the tensor\n","shape = (3, 3)\n","rand_tensor = torch.rand(shape)\n","\n","Enrl_tensor = torch.ones(2,2)\n","Name_tensor = torch.zeros(shape)\n","\n","# Print tensors\n","print(f\"Random Tensor: \\n{rand_tensor}\\n\")\n","print(f\"Enrl Tensor: \\n{Enrl_tensor}\\n\")\n","print(f\"Name Tensor: \\n{Name_tensor}\\n\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z6NblL4GYuDG","executionInfo":{"status":"ok","timestamp":1747387718726,"user_tz":-330,"elapsed":29,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"8a77aace-bd20-405e-ed61-49fd7ab60ab7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Random Tensor: \n","tensor([[0.8725, 0.8903, 0.8150],\n","        [0.8426, 0.8783, 0.3740],\n","        [0.3088, 0.3434, 0.3230]])\n","\n","Enrl Tensor: \n","tensor([[1., 1.],\n","        [1., 1.]])\n","\n","Name Tensor: \n","tensor([[0., 0., 0.],\n","        [0., 0., 0.],\n","        [0., 0., 0.]])\n","\n"]}]},{"cell_type":"code","source":["tensor=torch.ones(4,4)\n","print(f\"First row:{tensor[0]}\")\n","print(f\"First column: {tensor[:,0]}\")\n","print(f\"Last column: {tensor[...,-1]}\")\n","tensor[1,:]\n","print(tensor)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bQwBb10tceG4","executionInfo":{"status":"ok","timestamp":1747388925542,"user_tz":-330,"elapsed":21,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"19b26a0d-af68-4f78-c08e-ae210dd0b40a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["First row:tensor([1., 1., 1., 1.])\n","First column: tensor([1., 1., 1., 1.])\n","Last column: tensor([1., 1., 1., 1.])\n","tensor([[1., 1., 1., 1.],\n","        [1., 1., 1., 1.],\n","        [1., 1., 1., 1.],\n","        [1., 1., 1., 1.]])\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"yDK0PT_5d2Jx"}},{"cell_type":"code","source":["#Arithematic Operations\n","y1 = tensor@tensor.T\n","y2 =tensor.matmul(tensor.T)\n","\n","y3 = torch.rand_like(x)\n","torch.matmul(tensor,tensor.T, out=y3)\n","\n","z1 = tensor * tensor\n","z2 = tensor.mul(tensor)\n","z3 = torch.rand_like(tensor)\n","tensor.mul(tensor, tensor, out=z3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":211},"id":"K6_pPp6nfxfi","executionInfo":{"status":"error","timestamp":1748595197967,"user_tz":-330,"elapsed":182,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"2acb14ea-f35e-483f-ab28-c9a5db9b9122"},"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'tensor' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-01c94cfbd5ba>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Arithematic Operations\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0my1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtensor\u001b[0m\u001b[0;34m@\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0my2\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmatmul\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0my3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrand_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'tensor' is not defined"]}]},{"cell_type":"code","source":["agg = tensor.sum()\n","agg_item = agg.item()\n","print(agg_item, type(agg_item))"],"metadata":{"id":"JT7q3UvuhooO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"_PvsGIaHdaxw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["<!-- hasdafhj -->"],"metadata":{"id":"LIx061QocxXb"}},{"cell_type":"markdown","source":[],"metadata":{"id":"GeHIomJXdFCh"}},{"cell_type":"code","source":["print(f\"{tensor} \\n\")\n","tensor.add_(5)\n","print(tensor)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rvJW3rCohxeX","executionInfo":{"status":"ok","timestamp":1747389766750,"user_tz":-330,"elapsed":43,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"d3f5830b-6c5a-4269-dbac-4b3aa35d4420"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[6., 6., 6., 6.],\n","        [6., 6., 6., 6.],\n","        [6., 6., 6., 6.],\n","        [6., 6., 6., 6.]]) \n","\n","tensor([[11., 11., 11., 11.],\n","        [11., 11., 11., 11.],\n","        [11., 11., 11., 11.],\n","        [11., 11., 11., 11.]])\n"]}]},{"cell_type":"code","source":["t = torch.ones(5)\n","print(f\"t: {t}\")\n","n = t.numpy()\n","print(f\"n: {n}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3pzIGSU6h0Tm","executionInfo":{"status":"ok","timestamp":1747389699416,"user_tz":-330,"elapsed":22,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"53682f80-2429-4708-bd4f-de36b6e56217"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["t: tensor([1., 1., 1., 1., 1.])\n","n: [1. 1. 1. 1. 1.]\n"]}]},{"cell_type":"code","source":["t.add_(1)\n","print(f\"t: {t}\")\n","print(f\"n: {n}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zlFDtn18h2mN","executionInfo":{"status":"ok","timestamp":1747389696210,"user_tz":-330,"elapsed":23,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"41ffdddf-bddb-4bab-eb83-cdad43962eb2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["t: tensor([4., 4., 4., 4., 4.])\n","n: [4. 4. 4. 4. 4.]\n"]}]},{"cell_type":"code","source":["n = np.ones(5)\n","t = torch.from_numpy(n)"],"metadata":{"id":"dpZCkeN0h46t"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","\n","np.add(n, 1, out=n)\n","print(f\"t: {t}\")\n","print(f\"n: {n}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KZMKFLeqh7Yu","executionInfo":{"status":"ok","timestamp":1747389581162,"user_tz":-330,"elapsed":29,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"6fa055b4-59ce-4c5e-8fe4-3be8ee624328"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["t: tensor([3., 3., 3., 3., 3.])\n","n: [3. 3. 3. 3. 3.]\n"]}]},{"cell_type":"markdown","source":["#Scikit Learn Programs"],"metadata":{"id":"kFknhx33lAGy"}},{"cell_type":"markdown","source":["*Decision Tree*"],"metadata":{"id":"4T66CKO1pQAP"}},{"cell_type":"code","source":["from sklearn import tree\n","X = [[0, 0], [1, 1]]\n","Y = [0, 1]\n","clf = tree.DecisionTreeClassifier()\n","clf = clf.fit(X, Y)\n","#taking 2 array inputs"],"metadata":{"id":"NlwDjxrQlMtt","executionInfo":{"status":"ok","timestamp":1748598717921,"user_tz":-330,"elapsed":51,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["from sklearn.datasets import load_iris\n","from sklearn import tree\n","iris = load_iris()\n","X, y = iris.data, iris.target\n","clf = tree.DecisionTreeClassifier()\n","clf = clf.fit(X, y)"],"metadata":{"id":"FuL477CtmwVx","executionInfo":{"status":"ok","timestamp":1748598737702,"user_tz":-330,"elapsed":267,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["from sklearn import tree\n","X = [[0, 0], [2, 2]]\n","y = [0.5, 2.5]\n","clf = tree.DecisionTreeRegressor()\n","clf = clf.fit(X, y)\n","clf.predict([[1, 1]])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rcDOzCGdm1gX","executionInfo":{"status":"ok","timestamp":1748598758901,"user_tz":-330,"elapsed":11,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"7c62a915-0b19-482b-a949-672619a66326"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.5])"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["import graphviz\n","dot_data = tree.export_graphviz(clf, out_file=None)\n","graph = graphviz.Source(dot_data)\n","graph.render(\"iris\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"LdPqxaLfm6ko","executionInfo":{"status":"ok","timestamp":1748598912878,"user_tz":-330,"elapsed":465,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"d011207e-3ffe-43c8-c35a-9b276f3cc07c"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'iris.pdf'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["from sklearn.datasets import load_iris\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.tree import export_text\n","iris = load_iris()\n","decision_tree = DecisionTreeClassifier(random_state=0, max_depth=2)\n","decision_tree = decision_tree.fit(iris.data, iris.target)\n","r = export_text(decision_tree, feature_names=iris['feature_names'])\n","print(r)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2mm374JUnnST","executionInfo":{"status":"ok","timestamp":1748599000466,"user_tz":-330,"elapsed":244,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"f18cb162-72ee-44f9-aa93-8a10233b8e29"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["|--- petal width (cm) <= 0.80\n","|   |--- class: 0\n","|--- petal width (cm) >  0.80\n","|   |--- petal width (cm) <= 1.75\n","|   |   |--- class: 1\n","|   |--- petal width (cm) >  1.75\n","|   |   |--- class: 2\n","\n"]}]},{"cell_type":"code","source":["from sklearn import tree\n","X = [[0, 0], [2, 2]]\n","y = [0.5, 2.5]\n","clf = tree.DecisionTreeRegressor()\n","clf = clf.fit(X, y)\n","clf.predict([[1, 1]])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IrhBIcHQoLFr","executionInfo":{"status":"ok","timestamp":1748599096266,"user_tz":-330,"elapsed":51,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"e13ddcfb-8dc6-4dd7-d09e-3d806e6f8a22"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.5])"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["#Threshold splitter to split the missing value\n","from sklearn.tree import DecisionTreeClassifier\n","import numpy as np\n","\n","X = np.array([0, 1, 6, np.nan]).reshape(-1, 1)\n","y = [0, 0, 1, 1]\n","\n","tree = DecisionTreeClassifier(random_state=0).fit(X, y)\n","tree.predict(X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R-CmYl9boM3Q","executionInfo":{"status":"ok","timestamp":1748599206064,"user_tz":-330,"elapsed":18,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"8d5f0701-92a9-4172-df6b-3082ed875f9e"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 1, 1])"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["#placing Mission value\n","from sklearn.tree import DecisionTreeClassifier\n","import numpy as np\n","\n","X = np.array([np.nan, -1, np.nan, 1]).reshape(-1, 1)\n","y = [0, 0, 1, 1]\n","\n","tree = DecisionTreeClassifier(random_state=0).fit(X, y)\n","\n","X_test = np.array([np.nan]).reshape(-1, 1)\n","tree.predict(X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZNnCPB8OonyY","executionInfo":{"status":"ok","timestamp":1748599259557,"user_tz":-330,"elapsed":26,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"2c7c497a-df61-4ebc-a7bc-b285937aad54"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1])"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["#missing value mapping to the child\n","from sklearn.tree import DecisionTreeClassifier\n","import numpy as np\n","\n","X = np.array([np.nan, -1, np.nan, 1]).reshape(-1, 1)\n","y = [0, 0, 1, 1]\n","\n","tree = DecisionTreeClassifier(random_state=0).fit(X, y)\n","\n","X_test = np.array([np.nan]).reshape(-1, 1)\n","tree.predict(X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nk99Y9rso1gq","executionInfo":{"status":"ok","timestamp":1748599326222,"user_tz":-330,"elapsed":43,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}},"outputId":"c619af82-342a-4297-aebe-cba44b39791d"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1])"]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","source":["*SVM*"],"metadata":{"id":"iO5DLgWnpn9X"}},{"cell_type":"code","source":["# Import libraries\n","from sklearn import datasets\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.svm import SVC\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n"],"metadata":{"id":"hMuvSP28pqdr","executionInfo":{"status":"ok","timestamp":1748599775631,"user_tz":-330,"elapsed":850,"user":{"displayName":"Karan Prajapati","userId":"13915342272836683482"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["# Load dataset\n","iris = datasets.load_iris()\n","X = iris.data\n","y = iris.target\n"],"metadata":{"id":"r72DI6dDq3vb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Split into train/test sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n"],"metadata":{"id":"Wxt9M0MYq43x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Feature scaling\n","scaler = StandardScaler()\n","X_train = scaler.fit_transform(X_train)\n","X_test = scaler.transform(X_test)\n"],"metadata":{"id":"8WXFVmJ7q8SH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Train the SVM classifier\n","svm_model = SVC(kernel='linear')  # You can try 'rbf', 'poly', or 'sigmoid'\n","svm_model.fit(X_train, y_train)\n"],"metadata":{"id":"jwNDLR8qq-dk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Predict on test set\n","y_pred = svm_model.predict(X_test)\n"],"metadata":{"id":"ERzt0JA2rDSH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Evaluation\n","print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n","print(\"\\nConfusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred))\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))\n"],"metadata":{"id":"AxI9nYOWrE2C"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Visualize confusion matrix\n","sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, cmap=\"Blues\", fmt=\"d\")\n","plt.xlabel(\"Predicted\")\n","plt.ylabel(\"Actual\")\n","plt.title(\"Confusion Matrix\")\n","plt.show()\n"],"metadata":{"id":"tA6o-5vQrFBk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["*Logistic Regression*"],"metadata":{"id":"pOEYQYv2rKxH"}},{"cell_type":"code","source":["# Import libraries\n","from sklearn import datasets\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n"],"metadata":{"id":"BYzlW2_srFM4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Load iris dataset\n","iris = datasets.load_iris()\n","X = iris.data\n","y = iris.target\n","\n","# Use only class 0 and 1\n","X = X[y != 2]\n","y = y[y != 2]\n"],"metadata":{"id":"LGAl88LDrdP6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Split into train/test sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n"],"metadata":{"id":"J4NauJLnreVM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Feature scaling\n","scaler = StandardScaler()\n","X_train = scaler.fit_transform(X_train)\n","X_test = scaler.transform(X_test)\n"],"metadata":{"id":"gV5ymsiTrfZA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Train logistic regression model\n","log_model = LogisticRegression()\n","log_model.fit(X_train, y_train)\n"],"metadata":{"id":"eI_Vx0TxrgWx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Predict on test set\n","y_pred = log_model.predict(X_test)\n"],"metadata":{"id":"W3urFMhNrhlc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Evaluation\n","print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n","print(\"\\nConfusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred))\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))\n"],"metadata":{"id":"ZWvUz1m4rivF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Visualize confusion matrix\n","sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, cmap=\"Greens\", fmt=\"d\")\n","plt.xlabel(\"Predicted\")\n","plt.ylabel(\"Actual\")\n","plt.title(\"Confusion Matrix\")\n","plt.show()\n"],"metadata":{"id":"9tv5vPrqrjzy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["*Naive Baise*"],"metadata":{"id":"FcAblgwOryPA"}},{"cell_type":"code","source":["# Import libraries\n","from sklearn import datasets\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n"],"metadata":{"id":"lAdH8WYwsIWg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Load Iris dataset\n","iris = datasets.load_iris()\n","X = iris.data\n","y = iris.target\n"],"metadata":{"id":"q0QbVLT3sKia"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Train-test split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n"],"metadata":{"id":"y2C3KGF5sMC6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Feature scaling (optional)\n","scaler = StandardScaler()\n","X_train = scaler.fit_transform(X_train)\n","X_test = scaler.transform(X_test)\n"],"metadata":{"id":"Y_Tj7Q5qsNOZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create and train the Naive Bayes model\n","nb_model = GaussianNB()\n","nb_model.fit(X_train, y_train)\n"],"metadata":{"id":"C4oWWfvwsOqh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Predict on the test set\n","y_pred = nb_model.predict(X_test)\n"],"metadata":{"id":"-Ql2lf2WsP1C"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Evaluation metrics\n","print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n","print(\"\\nConfusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred))\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))\n"],"metadata":{"id":"r5YNIuY_sQ9o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Plot confusion matrix\n","sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, cmap=\"Purples\", fmt=\"d\")\n","plt.xlabel(\"Predicted\")\n","plt.ylabel(\"Actual\")\n","plt.title(\"Confusion Matrix - Naive Bayes\")\n","plt.show()\n"],"metadata":{"id":"17hLNyG7sSxp"},"execution_count":null,"outputs":[]}]}